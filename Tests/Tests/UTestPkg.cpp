// ==============================
// Fichier:			UTestPkg.cp
// Projet:			(Desktop Connection Library)
// Ecrit par:		Paul Guyot (pguyot@kallisys.net)
// 
// Créé le:			28/2/2004
// Tabulation:		4 espaces
// 
// Copyright:		© 2004 by Paul Guyot.
// 					Tous droits réservés pour tous pays.
// Licence:			Licence Réflexive Kallisys
// 					http://www.kallisys.org/reflexive/
// ===========
// $Id: UTestPkg.cp,v 1.3 2004/03/13 08:50:02 paul Exp $
// ===========

#include "UTestPkg.h"

// ANSI C
#include <stdio.h>
#include <string.h>

// DCL
#include <DCL/NS_Objects/Objects/TDCLNSRef.h>
#include <DCL/NS_Objects/Objects/TDCLNSFrame.h>
#include <DCL/NS_Objects/Exchange/TDCLPkgEncoder.h>
#include <DCL/NS_Objects/Exchange/TDCLPkgDecoder.h>
#include <DCL/Package/TDCLPackage.h>
#include <DCL/Streams/TDCLMemStream.h>
#include <DCL/NS_Objects/Objects/TDCLNSSymbol.h>

// Tests
#include "UTestNS.h"

const KUInt8 minPackage[] = {
    0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x30, 0x78, 0x78, 0x78, 0x78, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00, 0x22, 0x00, 0x00, 0x05, 0xf0,
    0xdb, 0x14, 0xce, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x05, 0x20,
    0x61, 0x75, 0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x36, 0x00, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69,
    0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x00, 0x00, 0x44, 0x00, 0x43, 0x00, 0x4c, 0x00, 0x54,
    0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x3a, 0x00, 0x4b, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x6c,
    0x00, 0x69, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x00, 0x4e, 0x65, 0x77, 0x74, 0x6f, 0x6e,
    0x20, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x20, 0x31, 0x2e, 0x36, 0x2e, 0x34, 0x3b, 0x20,
    0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x4d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x64, 0x20, 0x76, 0x35, 0x4e, 0x65, 0x77, 0x74, 0x6f,
    0x6e, 0x20, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x20, 0x31, 0x2e, 0x36, 0x2e, 0x34, 0x00,
    0x00, 0x00, 0x10, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe1,
    0x00, 0x00, 0x18, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x01, 0x81,
    0x00, 0x00, 0x04, 0x49, 0x00, 0x00, 0x05, 0x41, 0x00, 0x00, 0x1c, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x19, 0x00, 0x00, 0x01, 0x39,
    0x00, 0x00, 0x01, 0x61, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x81, 0x91, 0x61, 0x8c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53,
    0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0xbf, 0xbf, 0x00, 0x00, 0x21, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x53, 0xe4, 0x69, 0xb3, 0x64, 0x65, 0x76, 0x49, 0x6e, 0x73, 0x74, 0x61,
    0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0x36, 0x12, 0xb3, 0xf2,
    0x64, 0x65, 0x76, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00,
    0x00, 0x00, 0x24, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa9, 0x00, 0x00, 0x02, 0x81,
    0x00, 0x00, 0x02, 0xa1, 0x00, 0x00, 0x02, 0xc1, 0x00, 0x00, 0x03, 0x39, 0x00, 0x00, 0x00, 0x04,
    0x00, 0x00, 0x00, 0x02, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x28, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0xd1, 0x00, 0x00, 0x01, 0xe9,
    0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x02, 0x29, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 0x02, 0x61,
    0x00, 0x00, 0x16, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0x25, 0x0b, 0xd4, 0x46,
    0x63, 0x6c, 0x61, 0x73, 0x73, 0x00, 0xbf, 0xbf, 0x00, 0x00, 0x1d, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x83, 0xa6, 0x3a, 0xcd, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0xc3, 0xc1, 0x17, 0x60, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73,
    0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x13, 0xe7, 0x40, 0xdd, 0x61, 0x72, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65,
    0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x5b, 0x3c, 0x3b, 0xf5, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x00,
    0x00, 0x00, 0x1d, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0x7c, 0xe9, 0xe5, 0xa9,
    0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x00, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x1a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0x3f, 0xfd, 0x28, 0xd6,
    0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x1c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe9, 0x7b, 0x18, 0x91, 0x19,
    0x81, 0x1a, 0x29, 0xa4, 0x7b, 0x7c, 0x7b, 0x1b, 0x3a, 0x00, 0x7c, 0x02, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x1c, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x01, 0x61,
    0x00, 0x00, 0x02, 0xe1, 0x00, 0x00, 0x03, 0x19, 0x00, 0x00, 0x01, 0x39, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x14, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x02, 0xf9, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1d, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x63, 0xbf, 0xab, 0xcb, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0xea, 0x16, 0x3c, 0xf7, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e,
    0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x00, 0xbf, 0x00, 0x00, 0x20, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x59, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x24, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1,
    0x00, 0x00, 0x03, 0xb9, 0x00, 0x00, 0x03, 0xd9, 0x00, 0x00, 0x03, 0xf9, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x1e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0xf1, 0x9e, 0x1a, 0x0b,
    0x5f, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x72, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x00, 0xbf, 0xbf,
    0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x52, 0xc5, 0xd5, 0xf0, 0xa1,
    0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x1d, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x55, 0x7b, 0x79, 0x93, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x6f, 0x72, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1a, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x8e, 0x0e, 0x79, 0x12, 0x70, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d,
    0x65, 0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x17, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0x06, 0x6e, 0x96, 0x95, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x00, 0xbf,
    0x00, 0x00, 0x18, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x29, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1c, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1,
    0x00, 0x00, 0x03, 0xb9, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x24, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xa9, 0x00, 0x00, 0x02, 0x81, 0x00, 0x00, 0x04, 0x71, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x04, 0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe9, 0x22, 0x02, 0xbf, 0xbf,
    0x00, 0x00, 0x20, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa1, 0x00, 0x00, 0x05, 0x09,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x24, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1, 0x00, 0x00, 0x03, 0xb9, 0x00, 0x00, 0x04, 0xc9,
    0x00, 0x00, 0x04, 0xe9, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1c, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0xdb, 0x54, 0x41, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50,
    0x61, 0x72, 0x74, 0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x1b, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x55, 0x52, 0xbd, 0x82, 0x8b, 0x9d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
    0x72, 0x74, 0x00, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x18, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x05, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x1c, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1, 0x00, 0x00, 0x03, 0xb9, 0xbf, 0xbf, 0xbf, 0xbf,
    0x00, 0x00, 0x24, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa9, 0x00, 0x00, 0x02, 0x81,
    0x00, 0x00, 0x05, 0x69, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x79, 0x00, 0x00, 0x00, 0x04,
    0x00, 0x00, 0x00, 0x02, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xe9, 0x22, 0x02, 0xbf, 0xbf, 0x00, 0x00, 0x1c, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x05, 0x99, 0x00, 0x00, 0x05, 0xb9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x02, 0xbf, 0xbf, 0xbf, 0xbf, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1,
    0x00, 0x00, 0x03, 0xb9, 0x00, 0x00, 0x04, 0xe9, 0x00, 0x00, 0x18, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x05, 0xd1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x1c, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x03, 0xa1, 0x00, 0x00, 0x03, 0xb9, 0xbf, 0xbf, 0xbf, 0xbf,
};

// ------------------------------------------------------------------------- //
//  * WalterSmith( void )
// ------------------------------------------------------------------------- //
void
UTestPkg::WalterSmith( void )
{
	// Récupération de la structure Walter Smith
	TDCLNSRef theWalterSmithFrameRef = UTestNS::GetWalterSmith();
	TDCLNSFrame& theWalterSmithFrame = theWalterSmithFrameRef.ToFrame();

	// Ensuite, encodage sur stdout.
	TDCLMemStream theMemStream;
	TDCLPkgEncoder theEncoder( &theMemStream );
	
	theEncoder.AddObject( theWalterSmithFrameRef );
	
	// Affichage des données en hexa.
	const KUInt8* theData = (const KUInt8*) theMemStream.GetBuffer();
	KUInt32 theDataCount = theMemStream.GetBufferSize();
	
	KUInt32 indexData;
	for ( indexData = 0; indexData < theDataCount; indexData++ )
	{
		(void) ::printf( "%.2X", theData[indexData] );
		if (indexData % 16 == 15)
		{
			(void) ::printf( "\n" );
		}
	}
	(void) ::printf( "\n" );

	// Vérification que le décodage se passe bien.
	theMemStream.SetCursor( 0, TDCLMemStream::kFromStart );

	TDCLPkgDecoder theDecoder( &theMemStream );
	TDCLNSRef theFrameDecodedRef = theDecoder.GetNextObject();
	TDCLNSFrame& theFrameDecoded = theFrameDecodedRef.ToFrame();
	
	// Les deux structures doivent être identiques.
	// Je vais juste vérifier que les clés et les classes/valeurs immédiates
	// sont les mêmes
	KUInt32 nbPairs = theFrameDecoded.GetLength();
	if (nbPairs != theWalterSmithFrame.GetLength())
	{
		(void) ::printf(
				"Erreur: les tailles divergent (%u != %u)\n",
				(unsigned int) nbPairs,
				(unsigned int) theWalterSmithFrame.GetLength());
	} else {
		KUInt32 indexPairs;
		for (indexPairs = 0; indexPairs < nbPairs; indexPairs++)
		{
			TDCLNSSymbol& theKey =
				theWalterSmithFrame.GetKey(indexPairs).ToSymbol();
			if (!theFrameDecoded.HasSlot(theKey))
			{
				(void) ::printf(
						"Erreur: la structure décodée n'a pas la clé %s\n",
						(const char*) theKey );
			} else {
				// Est-ce un immédiat?
				TDCLNSRef theWSValue = theWalterSmithFrame.Get(theKey);
				TDCLNSRef theFDValue = theFrameDecoded.Get(theKey);
				
				if (theWSValue != theFDValue)
				{
					if (theWSValue.ClassOf() != theFDValue.ClassOf())
					{
						(void) ::printf(
							"Erreur: Clé %s: les classes des valeurs"
							" divergent\n",
							theKey.GetString());
					} else if (!theWSValue.IsPtr()) {
						(void) ::printf(
							"Erreur: Clé %s: les valeurs divergent\n",
							theKey.GetString());
					}
				}
			}
		}
	}

	// Encodage à nouveau sur stdout.
	TDCLMemStream anotherMemStream;
	TDCLPkgEncoder anotherEncoder( &anotherMemStream );
	
	anotherEncoder.AddObject( theFrameDecodedRef );
	
	// Affichage des données en hexa.
	theData = (const KUInt8*) anotherMemStream.GetBuffer();
	theDataCount = anotherMemStream.GetBufferSize();
	
	for ( indexData = 0; indexData < theDataCount; indexData++ )
	{
		(void) ::printf( "%.2X", theData[indexData] );
		if (indexData % 16 == 15)
		{
			(void) ::printf( "\n" );
		}
	}
	(void) ::printf( "\n" );
}

// ------------------------------------------------------------------------- //
//  * IdemPotent( void )
// ------------------------------------------------------------------------- //
void
UTestPkg::IdemPotent( void )
{
    TDCLMemStream stream(minPackage, sizeof(minPackage));
    TDCLPackage package(&stream);
    TDCLMemStream copy;
    package.WriteToStream(&copy);
	const KUInt8* theData = (const KUInt8*) copy.GetBuffer();
	KUInt32 theDataCount = copy.GetBufferSize();
	Boolean mismatch = false;
    if (theDataCount != sizeof(minPackage)) {
        ::printf("Copy mismatch (got %d, expected %d)\n", theDataCount, (int) sizeof(minPackage));
        mismatch = true;
    } else {
        if (::memcmp(theData, minPackage, sizeof(minPackage))) {
            ::printf("Data mismatch\n");
            mismatch = true;
        }
    }
    if (mismatch) {
        KUInt32 indexData;
        ::printf("Original:\n");
        for ( indexData = 0; indexData < sizeof(minPackage); indexData++ )
        {
            (void) ::printf( "%.2X", minPackage[indexData] );
            if (indexData % 16 == 15)
            {
                (void) ::printf( "\n" );
            }
        }
        (void) ::printf( "\n" );
        ::printf("Copy:\n");
        for ( indexData = 0; indexData < theDataCount; indexData++ )
        {
            (void) ::printf( "%.2X", theData[indexData] );
            if (indexData % 16 == 15)
            {
                (void) ::printf( "\n" );
            }
        }
        (void) ::printf( "\n" );
    }
}

// ============================================================= //
// APL is a natural extension of assembler language programming; //
// ...and is best for educational purposes.                      //
//                 -- A. Perlis                                  //
// ============================================================= //
